version: 2
jobs:
  # lint is the initial job which lints the codebase using standard golangci-lint linter
  lint:
    docker:
      - image: golang:1.13.1-alpine
    working_directory: /go/src/github.com/ocibuilder/ocibuilder
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}
            - go-dep-cache-
      - run:
          name: Install dependencies
          command: |
            apk update && apk add curl git build-base bash
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep version
            dep ensure
      - save_cache:
          key: go-dep-cache-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - run: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.21.0
      - run: make lint
  # test runs the ocibuilder unit tests and stores test results in TEMP_RESULTS
  unit_test:
    docker:
      - image: golang:1.13.1
    working_directory: /go/src/github.com/ocibuilder/ocibuilder
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}
            - go-dep-cache-
      - run:
          name: Run unit tests
          command: make test
  e2e_test_docker:
    docker:
      - image: docker:stable
    working_directory: /go/src/github.com/ocibuilder/ocibuilder
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}
            - go-dep-cache-
      - run:
          name: Run e2e tests
          command: |
            echo "installing go version 1.10.3..."
            apk add --no-cache --virtual .build-deps bash gcc musl-dev openssl go
            wget -O go.tgz https://dl.google.com/go/go1.13.3.src.tar.gz
            tar -C /usr/local -xzf go.tgz
            cd /usr/local/go/src/
            ./make.bash
            export PATH="/usr/local/go/bin:$PATH"
            export GOPATH=/opt/go/
            export PATH=$PATH:$GOPATH/bin
            apk del .build-deps
            echo "running e2e test"
            go test ./testing/e2e
  # build_linux runs the build of the linux ocictl artifact and persists the binary to the circleci workspace
  build_linux:
    docker:
      - image: golang:1.13.1
    working_directory: /go/src/github.com/ocibuilder/ocibuilder
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}
            - go-dep-cache-
      - run: go get -u github.com/gobuffalo/packr/packr
      - run:
          name: Build Linux Artifact
          command: "make ocictl-linux"
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/
  # build_mac runs the build of the mac ocictl artifact and persists the binary to the circleci workspace
  build_mac:
    docker:
      - image: golang:1.13.1
    working_directory: /go/src/github.com/ocibuilder/ocibuilder
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}
            - go-dep-cache-
      - run: go get -u github.com/gobuffalo/packr/packr
      - run:
          name: Build Mac Artifact
          command: "make ocictl-mac"
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/
  # push_container pushes the ocictl container to the ocibuilder docker registry when a new tag is added to ocibuilder
  # TODO: update push to build and push using an ocictl spec file
  push_container:
    docker:
      - image: golang:1.13.1-alpine
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install Docker Client
          command: |
            set -x
            DOCKER_VERSION="17.03.0-ce"
            curl -L -o /tmp/docker-$DOCKER_VERSION.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION.tgz
            tar -xz -C /tmp -f /tmp/docker-$DOCKER_VERSION.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Run Docker Build
          command: |
            echo "Docker Build Step"
      - run:
          name: Run Docker Push
          command: |
            VERSION=$(dist/ocictl --version)
            echo "Docker Push Step"
  # push_bin pushes both the linux and mac binaries to a github release when a new tag is added to ocibuilder
  push_bin:
    environment:
      - CIRCLE_PROJECT_USERNAME: ocibuilder
      - CIRCLE_PROJECT_REPONAME: ocibuilder
    docker:
      - image: golang:1.13.1-alpine
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish Release Binaries to GitHub
          command: |
            go get github.com/tcnksm/ghr
            VERSION=$(dist/ocictl --version)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./dist/

#TODO: add contexts to share env variables between different jobs
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - lint
      - unit_test:
          requires:
            - lint
      - e2e_test_docker:
          requires:
            - unit_test
      - build_linux:
          requires:
            - e2e_test_docker
      - build_mac:
          requires:
            - e2e_test_docker
      - push_bin:
          requires:
            - build_linux
            - build_mac
          filters:
            branches:
              ignore: /.*/
            tags:
              # only recognise tags with semantic versioning e.g. 0.1.0
              only: /^\d+\.\d+\.\d+$/
      - push_container:
          requires:
            - build_linux
          filters:
            branches:
              ignore: /.*/
            tags:
              # only recognise tags with semantic versioning e.g. 0.1.0
              only: /^\d+\.\d+\.\d+$/